// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// generator docs {
//   provider = "node node_modules/prisma-docs-generator"
//   output   = "docs/"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(cuid()) @db.VarChar(100)
  userName   String       @unique @map("user_name") @db.VarChar(20)
  password   String       @db.VarChar(100)
  disabled   Boolean      @default(false)
  deleted    Boolean      @default(false)
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
  profile    Profile?
  roleInUser RoleInUser[]

  @@map("users")
}

enum Gender {
  MA
  FE
  OT
}

model Profile {
  id          Int       @id @default(autoincrement()) @db.Integer
  nickName    String?   @map("nick_name") @db.VarChar(50)
  avatar      String?   @db.VarChar(255)
  email       String?   @unique @db.VarChar(50)
  phone       String?   @unique @db.VarChar(20)
  gender      Gender    @default(MA)
  birthday    DateTime?
  description String?   @db.VarChar(150)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique @map("user_id")

  @@map("profiles")
}

model Role {
  id               Int                @id @default(autoincrement()) @db.SmallInt
  name             String             @unique @db.VarChar(50)
  description      String?            @db.VarChar(150)
  disabled         Boolean            @default(false)
  deleted          Boolean            @default(false)
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  roleInPermission RoleInPermission[]
  roleInUser       RoleInUser[]

  @@map("roles")
}

model RoleInUser {
  roles  Role @relation(fields: [roleId], references: [id])
  roleId Int  @map("role_id")

  users  User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@id([roleId, userId])
  @@map("role_in_user")
}

enum MenuType {
  DIRECTORY
  MENU
  BUTTON
}

model Permission {
  id               Int                @id @default(autoincrement()) @db.SmallInt
  type             MenuType           @default(MENU)
  name             String             @unique @db.VarChar(50)
  permission       String?            @unique @db.VarChar(50)
  icon             String?            @db.VarChar(50)
  path             String?            @db.VarChar(50)
  component        String?            @db.VarChar(150)
  sort             Int                @default(0) @db.SmallInt
  redirect         String?            @db.VarChar(100)
  disabled         Boolean            @default(false)
  hidden           Boolean            @default(false)
  cache            Boolean            @default(false)
  props            Boolean            @default(false)
  deleted          Boolean            @default(false)
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  pid              Int?               @db.SmallInt
  parent           Permission?        @relation("ParentToChildren", fields: [pid], references: [id])
  children         Permission[]       @relation("ParentToChildren")
  roleInPermission RoleInPermission[]

  @@map("permissions")
}

model RoleInPermission {
  permissions  Permission @relation(fields: [permissionId], references: [id])
  permissionId Int        @map("permission_id")

  roles  Role @relation(fields: [roleId], references: [id])
  roleId Int  @map("role_id")

  @@id([roleId, permissionId])
  @@map("role_in_permission")
}
